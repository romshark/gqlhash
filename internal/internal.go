package internal

import "github.com/romshark/gqlhash/parser"

// NoopHash is a no-op hasher for testing purposes.
type NoopHash struct{}

func (NoopHash) Write(d []byte) (int, error) { return len(d), nil }
func (NoopHash) Reset()                      { /* No-op */ }
func (NoopHash) Sum([]byte) []byte           { return []byte("mock-hash-sum") }

var _ parser.Hash = NoopHash{}

var TestUnexpectedEOF = []string{
	"",
	"{",
	"query",
	"mutation",
	"subscription",
	"fragment",
	"fragment F",
	"fragment F on",
	"fragment F on X",
	"fragment F on X @",
	"fragment F on X @dir",
	"fragment F on X @dir {",
	"query Foo",
	"query Foo (",
	"query Foo ($",
	"query Foo ($v",
	"query Foo ($v:",
	"query Foo ($v:T",
	"query Foo ($v:T@",
	"query Foo ($v:T@dir",
	"query Foo ($v:T@dir(",
	"query Foo ($v:T@dir(x",
	"query Foo ($v:T@dir(x:",
	"query Foo ($v:T=",
	`query Foo ($v:T="\`,
	`query Foo ($v:T="\u`,
	`query Foo ($v:T=""`,
	`query Foo ($v:T="""`,
	`query Foo ($v:T="""\`,
	`query Foo ($v:T="""\u`,
	"query Foo ($v:T=[",
	"query Foo ($v:T=[1",
	"query Foo ($v:T={",
	"query Foo ($v:T={x",
	"query Foo ($v:T={x:",
	"query Foo ($v:T={x:1",
	"query Foo ($v:T=-",
	"query Foo ($v:T=12",
	// When adding a suffix at the end it actually becomes unexpected token err
	// "query Foo ($v:T=12.",
	"query Foo ($v:T=12e",
	"query Foo ($v:T=12E",
	"query Foo ($v:T=12.3e",
	"query Foo ($v:T=12.3E",
	"query Foo ($v:T=12.3E+",
	"query Foo ($v:T=12.3E-",
	"query Foo ($v:T=12.3E-4",
	"query Foo ($v:[",
	"query Foo ($v:[T",
	"query Foo ($v:[T]",
	"query Foo ($v:[T]!",
	"query Foo ($v:[T]! $v2",
	"query Foo ($v:[T]!)",
	"query Foo ($v:[T]!) {",
	"{ ",
	"{ foo",
	"{ foo: ",
	"{ foo: bar",
	"{ foo(",
	"{ foo(v",
	"{ foo(v:",
	"{ foo(v:$",
	"{ foo(v:$v",
	"{ foo(v:$v)",
	"{ foo(v:$v) {",
	"{ foo(v:$v) {...",
	"{ foo(v:$v) {...on",
	"{ foo(v:$v) {...on T",
	"{ foo(v:$v) {...T",
	"{ foo @",
	"{ foo @dir",
	"{ foo @dir(",
	"{ foo @dir(x",
	"{ foo @dir(x:",
	"{ foo @dir(x:3",
	"{ foo @dir(x:3)",
}

var TestErrUnexpectedToken = []string{
	"?",
	"{?",
	"{x?",
	"{x:?",
	"{x: ?",
	"{x:y}?",
	"query?",
	"query ?",
	"mutation ?",
	"subscription ?",
	"fragment on",
	"fragment ?",
	"fragment F?",
	"fragment F ?",
	"fragment F on?",
	"fragment F on T?",
	"fragment F on [",
	"fragment F on T @?",
	"fragment F on T @dir?",
	"fragment F on T @dir(?",
	"query Foo?",
	"query Foo(?",
	"query Foo($?",
	"query Foo($d?",
	"query Foo($d:?",
	"query Foo($d:[?",
	"query Foo($d:[T?",
	"query Foo($d:[T]@?",
	"query Foo($d:[T]@dir?",
	"query Foo($d:[T]@dir(?",
	"query Foo($d:[T]@dir(x?",
	"query Foo($d:[T]@dir(x:?",
	"query Foo($d:[T]?",
	"query Foo($d:[T]!?",
	"query Foo($d:[T]!=?",
	"query Foo($d:[T]=2?",
	`query Foo($d:[T]="\?`,
	`query Foo ($s:ID="` + "\u0000",
	`query Foo ($s:ID="` + "\u0001",
	`query Foo ($s:ID="` + "\u000b",
	// `query Foo($d:[T]="\u?`, // This Produces ErrUnexpectedEOF
	"query Foo @?",
	"query Foo @dir?",
	"query Foo @dir(?",
	"query Foo {?",
	"query Foo {f?",
	"query Foo {...?",
	"query Foo {...[",
	"query Foo {...T?",
	"query Foo {...T@?",
	"query Foo {...T@dir?",
	"query Foo {...T@dir(?",
	"query Foo {...T!?",
	"query Foo {...on?",
	"query Foo {...on ?",
	"query Foo {...on T?",
	"query Foo {...on T@?",
	"query Foo {...on T@dir?",
	"query Foo {...on T@dir(?",
	"query Foo {...@?",
	"query Foo {...@dir?",
	"query Foo {...@dir(?",
	"query Foo {...@dir(x?",
	"query Foo {...@dir(x:?",
	"query Foo {...@dir(x:-?",
	"query Foo {...@dir(x:-1?",
	"query Foo {...@dir(x:-1.?",
	"query Foo {...@dir(x:-1.2?",
	"query Foo {...@dir(x:-1.2?",
	"query Foo {...@dir(x:-1e?",
	"query Foo {...@dir(x:-1E?",
	"query Foo {...@dir(x:-1.e",
	"query Foo {...@dir(x:-1.E",
	"query Foo {...@dir(x:-1.2e?",
	"query Foo {...@dir(x:-1.2e-?",
	"query Foo {...@dir(x:-1.2e-4?",
	"query Foo {...@dir(x:[?",
	"query Foo {...@dir(x:{?",
	"query Foo {...@dir(x:{y?",
	"query Foo {...@dir(x:{y:?",
	"query Foo {...@dir(x:{y:{?",
}
